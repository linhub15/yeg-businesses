{"version":3,"sources":["core/data.service.ts","components/category-view.component.tsx","components/search/search-box.component.tsx","components/search/results.component.tsx","components/search/search.component.tsx","components/home.component.tsx","components/business-view.component.tsx","components/business-list-view.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DataService","fetch","then","response","json","id","url","Category","props","state","error","items","businessServiceData","fetchBusinessCategories","businessCategories","this","setState","message","className","map","item","index","key","href","business_category","React","Component","SearchBox","styles","root","marginRight","marginLeft","padding","display","alignItems","width","input","flex","iconButton","handleChange","bind","e","onValueChange","target","value","style","elevation","placeholder","onChange","aria-label","Results","results","business","trade_name","Search","businesses","searchResults","handleValueChange","fetchBusinesses","getResults","Fuse","shouldSort","threshold","location","distance","maxPatternLength","minMatchCharLength","keys","search","slice","searchValue","Home","_parsed","require","parse","window","_id","BusinessDetail","isLoaded","fetchBusiness","businessDetails","businessMapStyle","margin","marginTop","border","businessDetailStyle","component","align","address","neighbourhood_id","expiry_date","business_improvement_area","ward","date_of_issue","neighbourhood","_category","BusinessRender","name","onClick","category","status","BusinessListView","business_id","res","result","externalid","showBusiness","App","exact","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c45d012e.chunk.js","sourcesContent":["export interface Business {\n  address: string;\n  business_category: string;\n  business_improvement_area: string;\n  count: string | number;\n  date_of_issue: string | Date;\n  expiry_date: string | Date;\n  externalid: string; // 299917282-002\n  neighbourhood: string;\n  neighbourhood_id: string | number;\n  status: string; // ISSUED\n  trade_name: string; // 2052392 ALBERTA CORP.\n  ward: string;\n}\n\nexport interface BusinessCategory {\n  business_category: string;\n  count: string | number;\n}\nexport class DataService {\n  async fetchBusinesses(): Promise<Business[]> {\n    const url = 'https://data.edmonton.ca/resource/3trf-izgx.json';\n    return await fetch(url).then(response => {\n      return response.json();\n    });\n  }\n\n  async fetchBusinessCategories(): Promise<BusinessCategory[]> {\n    const url =\n      'https://data.edmonton.ca/resource/3trf-izgx.json?$select=business_category,count(*)&$group=business_category';\n    return await fetch(url).then(response => {\n      return response.json();\n    });\n  }\n\n  async fetchBusiness(id: string): Promise<Business> {\n    const url = `https://data.edmonton.ca/resource/3trf-izgx.json?externalid=${id}`;\n    return await fetch(url).then(response => {\n      return response.json();\n    });\n  }\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\n\nimport { DataService, BusinessCategory } from '../core/data.service';\n\nclass Category extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      error: null,\n      items: [],\n    };\n  }\n\n  async componentDidMount() {\n    const businessServiceData = new DataService();\n    const businessCategories = await businessServiceData.fetchBusinessCategories();\n    this.setState({ items: businessCategories });\n  }\n\n  render() {\n    const { error, items } = this.state;\n\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    }\n\n    return (\n      <div>\n        <h2 className=\"text-center\">Categories</h2>\n        {items.map((item: BusinessCategory, index: number) => (\n          <Button\n            key={index}\n            href={`/businesslistview?business_category=${\n              item.business_category\n            }`}\n          >\n            {item.business_category}\n          </Button>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Category;\n","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport IconButton from '@material-ui/core/IconButton';\nimport SearchIcon from '@material-ui/icons/Search';\n\ninterface SearchBoxProps {\n  value?: string;\n  onValueChange?: any;\n}\n\nclass SearchBox extends React.Component<SearchBoxProps> {\n  constructor(props: any) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e: any) {\n    this.props.onValueChange(e.target.value);\n  }\n\n  styles = {\n    root: {\n      marginRight: 'auto',\n      marginLeft: 'auto',\n      padding: '2px 4px',\n      display: 'flex',\n      alignItems: 'center',\n      width: 400,\n    },\n    input: {\n      marginLeft: 8,\n      flex: 1,\n    },\n    iconButton: {\n      padding: 10,\n    },\n  };\n\n  render() {\n    return (\n      <Paper style={this.styles.root} elevation={1}>\n        <InputBase\n          style={this.styles.input}\n          placeholder=\"Search Business\"\n          value={this.props.value}\n          onChange={this.handleChange}\n        />\n        <IconButton style={this.styles.iconButton} aria-label=\"Search\">\n          <SearchIcon />\n        </IconButton>\n      </Paper>\n    );\n  }\n}\n\nexport default SearchBox;\n","import React from 'react';\nimport { Business } from '../../core/data.service';\n\ninterface ResultProps {\n  searchValue: string;\n  results: Business[];\n}\n\nclass Results extends React.Component<ResultProps> {\n  render() {\n    return (\n      <div>\n        <div>\n          {this.props.results.map((business, index) => (\n            <div key={index}>\n              {business.trade_name} {business.business_category}\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Results;\n","import React from 'react';\nimport SearchBox from './search-box.component';\nimport Results from './results.component';\nimport { DataService, Business } from '../../core/data.service';\nimport Fuse from 'fuse.js';\n\ninterface SearchState {\n  value: string;\n  businesses: Business[];\n  searchResults: Business[];\n}\n\nclass Search extends React.Component<{}, SearchState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      value: '',\n      businesses: [],\n      searchResults: [],\n    };\n    this.handleValueChange = this.handleValueChange.bind(this);\n  }\n\n  async componentDidMount() {\n    const businessServiceData = new DataService();\n    this.setState({\n      value: '',\n      businesses: await businessServiceData.fetchBusinesses(),\n      searchResults: [],\n    });\n  }\n\n  handleValueChange(value: string) {\n    this.setState({\n      value: value,\n      searchResults: this.getResults(value, this.state.businesses),\n    });\n  }\n\n  getResults(value: string, businesses: Business[]): Business[] {\n    const options: Fuse.FuseOptions<Business> = {\n      shouldSort: true,\n      threshold: 0.6,\n      location: 0,\n      distance: 60,\n      maxPatternLength: 30,\n      minMatchCharLength: 1,\n      keys: ['trade_name'],\n    };\n    const fuse = new Fuse(businesses, options);\n    const results = fuse.search(value);\n    return results.slice(0, 5) as Business[];\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"text-center\">Search Edmonton Business Directory</h1>\n        <p className=\"text-center\">\n          Data is retrieved from City of Edmonton Open data.\n        </p>\n        <SearchBox\n          value={this.state.value}\n          onValueChange={this.handleValueChange}\n        />\n        <Results\n          searchValue={this.state.value}\n          results={this.state.searchResults}\n        />\n      </div>\n    );\n  }\n}\nexport default Search;\n","import React from 'react';\nimport Category from './category-view.component';\nimport Search from './search/search.component';\n\nconst Home = () => {\n  return (\n    <div>\n      <Search />\n      <Category />\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport '../App.css';\nimport '../core/data.service';\nimport { Business, DataService } from '../core/data.service';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\n// reference: https://www.npmjs.com/package/query-string\nconst _queryString = require('query-string');\n\nconst _parsed = _queryString.parse(window.location.search);\n\n// added a ternary conditional operator, so it it will show business: 7267742-001 as default\n// this will change in the future once we have the empty component setup.\nconst _id = _parsed.id != null ? _parsed.id : '7267742-001';\n\n// reference: https://material-ui.com/demos/cards/\nclass BusinessDetail extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: true,\n      items: [],\n    };\n  }\n\n  async componentDidMount() {\n    const businessServiceData = new DataService();\n    const businessDetails = await businessServiceData.fetchBusiness(_id);\n    this.setState({ items: businessDetails });\n  }\n\n  render() {\n    const { items } = this.state;\n\n    // inline styles\n    const businessMapStyle = {\n      margin: '0 auto',\n      marginTop: '10px',\n      width: '50%',\n      border: '1px solid black',\n    };\n\n    const businessDetailStyle = {\n      width: '48%',\n      display: 'inline-block',\n      padding: '10px 0',\n    };\n\n    return (\n      <div>\n        {items.map((item: Business, index: number) => (\n          <div className=\"business-container\" key={index}>\n            <h2>{item.trade_name}</h2>\n            <Paper elevation={3} className=\"paper-container\">\n              <Typography\n                component=\"div\"\n                style={businessMapStyle}\n                className=\"App business-map\"\n              >\n                Business Map Placeholder\n              </Typography>\n\n              <Typography\n                component=\"span\"\n                style={businessDetailStyle}\n                align=\"left\"\n                className=\"business-detail-container\"\n              >\n                <span className=\"business-detail-label\">\n                  Business Category:{' '}\n                </span>\n                <span>{item.business_category}</span>\n              </Typography>\n\n              <Typography\n                component=\"span\"\n                style={businessDetailStyle}\n                align=\"left\"\n                className=\"business-detail-container\"\n              >\n                <span className=\"business-detail-label\">Address: </span>\n                <span>{item.address}</span>\n              </Typography>\n\n              <Typography\n                component=\"span\"\n                style={businessDetailStyle}\n                align=\"left\"\n                className=\"business-detail-container\"\n              >\n                <span className=\"business-detail-label\">\n                  Neighbourhood ID:{' '}\n                </span>\n                <span>{item.neighbourhood_id}</span>\n              </Typography>\n\n              <Typography\n                component=\"span\"\n                style={businessDetailStyle}\n                align=\"left\"\n                className=\"business-detail-container\"\n              >\n                <span className=\"business-detail-label\">Expiry Date: </span>\n                <span>{item.expiry_date}</span>\n              </Typography>\n\n              <Typography\n                component=\"span\"\n                style={businessDetailStyle}\n                align=\"left\"\n                className=\"business-detail-container\"\n              >\n                <span className=\"business-detail-label\">\n                  Improvement Area:{' '}\n                </span>\n                <span>{item.business_improvement_area}</span>\n              </Typography>\n\n              <Typography\n                component=\"span\"\n                style={businessDetailStyle}\n                align=\"left\"\n                className=\"business-detail-container\"\n              >\n                <span className=\"business-detail-label\">Ward: </span>\n                <span>{item.ward}</span>\n              </Typography>\n\n              <Typography\n                component=\"span\"\n                style={businessDetailStyle}\n                align=\"left\"\n                className=\"business-detail-container\"\n              >\n                <span className=\"business-detail-label\">Date Of Issue: </span>\n                <span>{item.date_of_issue}</span>\n              </Typography>\n\n              <Typography\n                component=\"span\"\n                style={businessDetailStyle}\n                align=\"left\"\n                className=\"business-detail-container\"\n              >\n                <span className=\"business-detail-label\">Neighbourhood: </span>\n                <span>{item.neighbourhood}</span>\n              </Typography>\n            </Paper>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default BusinessDetail;\n","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\nimport '../App.css';\nimport '../core/data.service';\n\n// reference: https://www.npmjs.com/package/query-string\nconst _queryString = require('query-string');\n\nconst _parsed = _queryString.parse(window.location.search);\n\n// added a ternary conditional operator, so it it will show business: 7267742-001 as default\n// this will change in the future once we have the empty component setup.\nconst _category =\n  _parsed.business_category != null\n    ? '?business_category=' + _parsed.business_category\n    : '';\n\n/*\n    Functional component that will render each business for BusinessListView component\n*/\nfunction BusinessRender(props: any) {\n  const businessDetailStyle = {\n    width: '100%',\n    display: 'inline-block',\n    padding: '10px 0',\n  };\n\n  return (\n    <div\n      className=\"business-container\"\n      key={props.name}\n      onClick={props.onClick}\n    >\n      <Paper elevation={3} className=\"paper-container\">\n        <Typography\n          component=\"span\"\n          style={businessDetailStyle}\n          align=\"left\"\n          className=\"business-detail-container\"\n        >\n          <span className=\"business-detail-label\">Trade Name: </span>\n          <span>{props.name}</span>\n        </Typography>\n        <Typography\n          component=\"span\"\n          style={businessDetailStyle}\n          align=\"left\"\n          className=\"business-detail-container\"\n        >\n          <span className=\"business-detail-label\">Business Category: </span>\n          <span>{props.category !== '' ? props.category : 'N/A'}</span>\n        </Typography>\n        <Typography\n          component=\"span\"\n          style={businessDetailStyle}\n          align=\"left\"\n          className=\"business-detail-container\"\n        >\n          <span className=\"business-detail-label\">Status: </span>\n          <span>{props.status}</span>\n        </Typography>\n      </Paper>\n    </div>\n  );\n}\n\n//references: https://reactjs.org/docs/faq-ajax.html\n//            https://reactjs.org/docs/components-and-props.html\nclass BusinessListView extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: true,\n      items: [],\n    };\n  }\n\n  showBusiness(business_id: any) {\n    window.location.href = '/business?id=' + business_id;\n  }\n\n  async componentDidMount() {\n    fetch('https://data.edmonton.ca/resource/qhi4-bdpu.json' + _category)\n      .then(res => res.json())\n      .then(\n        result => {\n          this.setState({\n            isLoaded: true,\n            items: result,\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        error => {\n          this.setState({\n            isLoaded: true,\n            error,\n          });\n        }\n      );\n  }\n\n  render() {\n    const { items } = this.state;\n    return items.map((business: any) => (\n      <BusinessRender\n        key={business.externalid}\n        name={business.trade_name}\n        category={business.business_category}\n        status={business.status}\n        onClick={() => this.showBusiness(business.externalid)}\n      />\n    ));\n  }\n}\n\nexport default BusinessListView;\n","//references: https://codeburst.io/getting-started-with-react-router-5c978f70df91\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport Home from './components/home.component';\nimport Category from './components/category-view.component';\nimport BusinessDetail from './components/business-view.component';\nimport BusinessListView from './components/business-list-view.component';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/business\" component={BusinessDetail} />\n            <Route exact path=\"/category\" component={Category} />\n            <Route\n              exact\n              path=\"/businesslistview\"\n              component={BusinessListView}\n            />\n            <Route component={Home} />{' '}\n            {/* invalid link then show Home component */}\n          </Switch>\n\n          <footer className=\"app-footer\">\n            <h2>Contributors</h2>\n            <p>\n              <span id=\"hubert\">Hubert</span> | <span id=\"ian\">Ian</span> |{' '}\n              <span id=\"patricia\">Patricia</span>\n            </p>\n          </footer>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}